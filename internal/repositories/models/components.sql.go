// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: components.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const createWebsiteComponent = `-- name: CreateWebsiteComponent :one
INSERT INTO website_component (website_id, website_page_id, sort_key) VALUES ($1, $2, $3) RETURNING id, website_id, website_page_id, sort_key, created_at, updated_at, version
`

type CreateWebsiteComponentParams struct {
	WebsiteID     uuid.UUID `json:"website_id"`
	WebsitePageID uuid.UUID `json:"website_page_id"`
	SortKey       string    `json:"sort_key"`
}

func (q *Queries) CreateWebsiteComponent(ctx context.Context, arg CreateWebsiteComponentParams) (WebsiteComponent, error) {
	row := q.db.QueryRow(ctx, createWebsiteComponent, arg.WebsiteID, arg.WebsitePageID, arg.SortKey)
	var i WebsiteComponent
	err := row.Scan(
		&i.ID,
		&i.WebsiteID,
		&i.WebsitePageID,
		&i.SortKey,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const getImageComponentsByWebsiteID = `-- name: GetImageComponentsByWebsiteID :many
SELECT website_component.id, website_component.website_id, website_component.website_page_id, website_component.sort_key, website_component.created_at, website_component.updated_at, website_component.version, image_component.id, image_component.website_component_id, image_component.image_id, image_component.created_at, image_component.updated_at, image_component.version FROM website_component
JOIN image_component ON website_component.id = image_component.website_component_id
WHERE website_component.website_id = $1
`

type GetImageComponentsByWebsiteIDRow struct {
	WebsiteComponent WebsiteComponent `json:"website_component"`
	ImageComponent   ImageComponent   `json:"image_component"`
}

func (q *Queries) GetImageComponentsByWebsiteID(ctx context.Context, websiteID uuid.UUID) ([]GetImageComponentsByWebsiteIDRow, error) {
	rows, err := q.db.Query(ctx, getImageComponentsByWebsiteID, websiteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetImageComponentsByWebsiteIDRow{}
	for rows.Next() {
		var i GetImageComponentsByWebsiteIDRow
		if err := rows.Scan(
			&i.WebsiteComponent.ID,
			&i.WebsiteComponent.WebsiteID,
			&i.WebsiteComponent.WebsitePageID,
			&i.WebsiteComponent.SortKey,
			&i.WebsiteComponent.CreatedAt,
			&i.WebsiteComponent.UpdatedAt,
			&i.WebsiteComponent.Version,
			&i.ImageComponent.ID,
			&i.ImageComponent.WebsiteComponentID,
			&i.ImageComponent.ImageID,
			&i.ImageComponent.CreatedAt,
			&i.ImageComponent.UpdatedAt,
			&i.ImageComponent.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTextComponentsByWebsiteID = `-- name: GetTextComponentsByWebsiteID :many
SELECT website_component.id, website_component.website_id, website_component.website_page_id, website_component.sort_key, website_component.created_at, website_component.updated_at, website_component.version, simple_text_component.id, simple_text_component.website_component_id, simple_text_component.locale, simple_text_component.content, simple_text_component.created_at, simple_text_component.updated_at, simple_text_component.version FROM website_component
JOIN simple_text_component ON website_component.id = simple_text_component.website_component_id
WHERE website_component.website_id = $1
AND simple_text_component.locale = $2
`

type GetTextComponentsByWebsiteIDParams struct {
	WebsiteID uuid.UUID `json:"website_id"`
	Locale    string    `json:"locale"`
}

type GetTextComponentsByWebsiteIDRow struct {
	WebsiteComponent    WebsiteComponent    `json:"website_component"`
	SimpleTextComponent SimpleTextComponent `json:"simple_text_component"`
}

func (q *Queries) GetTextComponentsByWebsiteID(ctx context.Context, arg GetTextComponentsByWebsiteIDParams) ([]GetTextComponentsByWebsiteIDRow, error) {
	rows, err := q.db.Query(ctx, getTextComponentsByWebsiteID, arg.WebsiteID, arg.Locale)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTextComponentsByWebsiteIDRow{}
	for rows.Next() {
		var i GetTextComponentsByWebsiteIDRow
		if err := rows.Scan(
			&i.WebsiteComponent.ID,
			&i.WebsiteComponent.WebsiteID,
			&i.WebsiteComponent.WebsitePageID,
			&i.WebsiteComponent.SortKey,
			&i.WebsiteComponent.CreatedAt,
			&i.WebsiteComponent.UpdatedAt,
			&i.WebsiteComponent.Version,
			&i.SimpleTextComponent.ID,
			&i.SimpleTextComponent.WebsiteComponentID,
			&i.SimpleTextComponent.Locale,
			&i.SimpleTextComponent.Content,
			&i.SimpleTextComponent.CreatedAt,
			&i.SimpleTextComponent.UpdatedAt,
			&i.SimpleTextComponent.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWebsiteComponentsByWebsitePageID = `-- name: GetWebsiteComponentsByWebsitePageID :many
SELECT website_component.id, website_component.website_id, website_component.website_page_id, website_component.sort_key, website_component.created_at, website_component.updated_at, website_component.version, website_page.id, website_page.website_id, website_page.url_slug, website_page.sort_key, website_page.created_at, website_page.updated_at, website_page.version FROM website_component
LEFT JOIN website_page ON website_component.website_page_id = website_page.id
WHERE website_page_id = $1
`

type GetWebsiteComponentsByWebsitePageIDRow struct {
	WebsiteComponent WebsiteComponent `json:"website_component"`
	WebsitePage      WebsitePage      `json:"website_page"`
}

func (q *Queries) GetWebsiteComponentsByWebsitePageID(ctx context.Context, websitePageID uuid.UUID) ([]GetWebsiteComponentsByWebsitePageIDRow, error) {
	rows, err := q.db.Query(ctx, getWebsiteComponentsByWebsitePageID, websitePageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetWebsiteComponentsByWebsitePageIDRow{}
	for rows.Next() {
		var i GetWebsiteComponentsByWebsitePageIDRow
		if err := rows.Scan(
			&i.WebsiteComponent.ID,
			&i.WebsiteComponent.WebsiteID,
			&i.WebsiteComponent.WebsitePageID,
			&i.WebsiteComponent.SortKey,
			&i.WebsiteComponent.CreatedAt,
			&i.WebsiteComponent.UpdatedAt,
			&i.WebsiteComponent.Version,
			&i.WebsitePage.ID,
			&i.WebsitePage.WebsiteID,
			&i.WebsitePage.UrlSlug,
			&i.WebsitePage.SortKey,
			&i.WebsitePage.CreatedAt,
			&i.WebsitePage.UpdatedAt,
			&i.WebsitePage.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWebsiteImageComponent = `-- name: GetWebsiteImageComponent :one
SELECT website_component.id, website_component.website_id, website_component.website_page_id, website_component.sort_key, website_component.created_at, website_component.updated_at, website_component.version, image_component.id, image_component.website_component_id, image_component.image_id, image_component.created_at, image_component.updated_at, image_component.version FROM website_component 
LEFT JOIN image_component ON website_component.id = image_component.website_component_id
WHERE website_component.id = $1
`

type GetWebsiteImageComponentRow struct {
	WebsiteComponent WebsiteComponent `json:"website_component"`
	ImageComponent   ImageComponent   `json:"image_component"`
}

func (q *Queries) GetWebsiteImageComponent(ctx context.Context, id uuid.UUID) (GetWebsiteImageComponentRow, error) {
	row := q.db.QueryRow(ctx, getWebsiteImageComponent, id)
	var i GetWebsiteImageComponentRow
	err := row.Scan(
		&i.WebsiteComponent.ID,
		&i.WebsiteComponent.WebsiteID,
		&i.WebsiteComponent.WebsitePageID,
		&i.WebsiteComponent.SortKey,
		&i.WebsiteComponent.CreatedAt,
		&i.WebsiteComponent.UpdatedAt,
		&i.WebsiteComponent.Version,
		&i.ImageComponent.ID,
		&i.ImageComponent.WebsiteComponentID,
		&i.ImageComponent.ImageID,
		&i.ImageComponent.CreatedAt,
		&i.ImageComponent.UpdatedAt,
		&i.ImageComponent.Version,
	)
	return i, err
}

const getWebsiteTextComponent = `-- name: GetWebsiteTextComponent :one
SELECT website_component.id, website_component.website_id, website_component.website_page_id, website_component.sort_key, website_component.created_at, website_component.updated_at, website_component.version, simple_text_component.id, simple_text_component.website_component_id, simple_text_component.locale, simple_text_component.content, simple_text_component.created_at, simple_text_component.updated_at, simple_text_component.version FROM website_component 
LEFT JOIN simple_text_component ON website_component.id = simple_text_component.website_component_id
WHERE website_component.id = $1
AND simple_text_component.locale = $2
`

type GetWebsiteTextComponentParams struct {
	ID     uuid.UUID `json:"id"`
	Locale string    `json:"locale"`
}

type GetWebsiteTextComponentRow struct {
	WebsiteComponent    WebsiteComponent    `json:"website_component"`
	SimpleTextComponent SimpleTextComponent `json:"simple_text_component"`
}

func (q *Queries) GetWebsiteTextComponent(ctx context.Context, arg GetWebsiteTextComponentParams) (GetWebsiteTextComponentRow, error) {
	row := q.db.QueryRow(ctx, getWebsiteTextComponent, arg.ID, arg.Locale)
	var i GetWebsiteTextComponentRow
	err := row.Scan(
		&i.WebsiteComponent.ID,
		&i.WebsiteComponent.WebsiteID,
		&i.WebsiteComponent.WebsitePageID,
		&i.WebsiteComponent.SortKey,
		&i.WebsiteComponent.CreatedAt,
		&i.WebsiteComponent.UpdatedAt,
		&i.WebsiteComponent.Version,
		&i.SimpleTextComponent.ID,
		&i.SimpleTextComponent.WebsiteComponentID,
		&i.SimpleTextComponent.Locale,
		&i.SimpleTextComponent.Content,
		&i.SimpleTextComponent.CreatedAt,
		&i.SimpleTextComponent.UpdatedAt,
		&i.SimpleTextComponent.Version,
	)
	return i, err
}

const updateWebsiteComponent = `-- name: UpdateWebsiteComponent :one
UPDATE website_component SET
    website_id = coalesce($1, website_component.website_id),
    website_page_id = coalesce($2, website_component.website_page_id),
    sort_key = coalesce($3, website_component.sort_key),
    updated_at = now(), 
    version = website_component.version + 1
WHERE id = $4 RETURNING id, website_id, website_page_id, sort_key, created_at, updated_at, version
`

type UpdateWebsiteComponentParams struct {
	WebsiteID     uuid.UUID `json:"website_id"`
	WebsitePageID uuid.UUID `json:"website_page_id"`
	SortKey       string    `json:"sort_key"`
	ID            uuid.UUID `json:"id"`
}

func (q *Queries) UpdateWebsiteComponent(ctx context.Context, arg UpdateWebsiteComponentParams) (WebsiteComponent, error) {
	row := q.db.QueryRow(ctx, updateWebsiteComponent,
		arg.WebsiteID,
		arg.WebsitePageID,
		arg.SortKey,
		arg.ID,
	)
	var i WebsiteComponent
	err := row.Scan(
		&i.ID,
		&i.WebsiteID,
		&i.WebsitePageID,
		&i.SortKey,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const updateWebsiteTextComponent = `-- name: UpdateWebsiteTextComponent :one
UPDATE simple_text_component SET
    content = coalesce($1, simple_text_component.content),
    updated_at = now(), 
    version = simple_text_component.version + 1
WHERE website_component_id = $2
AND locale = $3 RETURNING id, website_component_id, locale, content, created_at, updated_at, version
`

type UpdateWebsiteTextComponentParams struct {
	Content            *string   `json:"content"`
	WebsiteComponentID uuid.UUID `json:"website_component_id"`
	Locale             string    `json:"locale"`
}

func (q *Queries) UpdateWebsiteTextComponent(ctx context.Context, arg UpdateWebsiteTextComponentParams) (SimpleTextComponent, error) {
	row := q.db.QueryRow(ctx, updateWebsiteTextComponent, arg.Content, arg.WebsiteComponentID, arg.Locale)
	var i SimpleTextComponent
	err := row.Scan(
		&i.ID,
		&i.WebsiteComponentID,
		&i.Locale,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const upsertWebsiteQandAComponent = `-- name: UpsertWebsiteQandAComponent :one
INSERT INTO image_component (website_component_id, image_id) VALUES ($1, $2) 
ON CONFLICT (website_component_id) DO UPDATE SET 
    image_id = coalesce($2, image_component.image_id),
    updated_at = now(), 
    version = image_component.version + 1 RETURNING id, website_component_id, image_id, created_at, updated_at, version
`

type UpsertWebsiteQandAComponentParams struct {
	WebsiteComponentID uuid.UUID  `json:"website_component_id"`
	ImageID            *uuid.UUID `json:"image_id"`
}

func (q *Queries) UpsertWebsiteQandAComponent(ctx context.Context, arg UpsertWebsiteQandAComponentParams) (ImageComponent, error) {
	row := q.db.QueryRow(ctx, upsertWebsiteQandAComponent, arg.WebsiteComponentID, arg.ImageID)
	var i ImageComponent
	err := row.Scan(
		&i.ID,
		&i.WebsiteComponentID,
		&i.ImageID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const upsertWebsiteSimpleTextComponent = `-- name: UpsertWebsiteSimpleTextComponent :one


INSERT INTO simple_text_component (website_component_id, locale, content) VALUES ($1, $2, $3) 
ON CONFLICT (website_component_id, locale) DO UPDATE SET 
    content = coalesce($3, simple_text_component.content),
    updated_at = now(), 
    version = simple_text_component.version + 1 RETURNING id, website_component_id, locale, content, created_at, updated_at, version
`

type UpsertWebsiteSimpleTextComponentParams struct {
	WebsiteComponentID uuid.UUID `json:"website_component_id"`
	Locale             string    `json:"locale"`
	Content            *string   `json:"content"`
}

// -- name: CreateWebsiteQandAComponent :one
// INSERT INTO simple_qanda_component (website_component_id, locale, question, answer, firebase_key, firebase_ref)
// VALUES (sqlc.arg(website_component_id), sqlc.arg(locale), sqlc.narg(question), sqlc.narg(answer), sqlc.narg(firebase_key), sqlc.narg(firebase_ref)) RETURNING *;
// -- name: UpdateWebsiteQandAComponent :one
// UPDATE simple_qanda_component SET
//
//	question = coalesce(sqlc.narg(question), simple_qanda_component.question),
//	answer = coalesce(sqlc.narg(answer), simple_qanda_component.answer),
//	firebase_key = coalesce(sqlc.narg(firebase_key), simple_qanda_component.firebase_key),
//	firebase_ref = coalesce(sqlc.narg(firebase_ref), simple_qanda_component.firebase_ref),
//	updated_at = now(),
//	version = simple_qanda_component.version + 1
//
// WHERE website_component_id = sqlc.arg(website_component_id)
// AND locale = sqlc.arg(locale) RETURNING *;
func (q *Queries) UpsertWebsiteSimpleTextComponent(ctx context.Context, arg UpsertWebsiteSimpleTextComponentParams) (SimpleTextComponent, error) {
	row := q.db.QueryRow(ctx, upsertWebsiteSimpleTextComponent, arg.WebsiteComponentID, arg.Locale, arg.Content)
	var i SimpleTextComponent
	err := row.Scan(
		&i.ID,
		&i.WebsiteComponentID,
		&i.Locale,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}
