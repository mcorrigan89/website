// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: components.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const createWebsiteComponent = `-- name: CreateWebsiteComponent :one
INSERT INTO website_component (website_id, website_section_id) VALUES ($1, $2) RETURNING id, website_id, website_section_id, created_at, updated_at, version
`

type CreateWebsiteComponentParams struct {
	WebsiteID        uuid.UUID `json:"website_id"`
	WebsiteSectionID uuid.UUID `json:"website_section_id"`
}

func (q *Queries) CreateWebsiteComponent(ctx context.Context, arg CreateWebsiteComponentParams) (WebsiteComponent, error) {
	row := q.db.QueryRow(ctx, createWebsiteComponent, arg.WebsiteID, arg.WebsiteSectionID)
	var i WebsiteComponent
	err := row.Scan(
		&i.ID,
		&i.WebsiteID,
		&i.WebsiteSectionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const getImageComponentsByWebsiteID = `-- name: GetImageComponentsByWebsiteID :many
SELECT website_component.id, website_component.website_id, website_component.website_section_id, website_component.created_at, website_component.updated_at, website_component.version, website_component_display.id, website_component_display.website_component_id, website_component_display.height, website_component_display.width, website_component_display.x_coordinate, website_component_display.y_coordinate, website_component_display.mobile_height, website_component_display.mobile_width, website_component_display.mobile_x_coordinate, website_component_display.mobile_y_coordinate, website_component_display.created_at, website_component_display.updated_at, website_component_display.version, image_component.id, image_component.website_component_id, image_component.image_id, image_component.created_at, image_component.updated_at, image_component.version FROM website_component
LEFT JOIN website_component_display ON website_component.id = website_component_display.website_component_id
JOIN image_component ON website_component.id = image_component.website_component_id
WHERE website_component.website_id = $1
`

type GetImageComponentsByWebsiteIDRow struct {
	WebsiteComponent        WebsiteComponent        `json:"website_component"`
	WebsiteComponentDisplay WebsiteComponentDisplay `json:"website_component_display"`
	ImageComponent          ImageComponent          `json:"image_component"`
}

func (q *Queries) GetImageComponentsByWebsiteID(ctx context.Context, websiteID uuid.UUID) ([]GetImageComponentsByWebsiteIDRow, error) {
	rows, err := q.db.Query(ctx, getImageComponentsByWebsiteID, websiteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetImageComponentsByWebsiteIDRow{}
	for rows.Next() {
		var i GetImageComponentsByWebsiteIDRow
		if err := rows.Scan(
			&i.WebsiteComponent.ID,
			&i.WebsiteComponent.WebsiteID,
			&i.WebsiteComponent.WebsiteSectionID,
			&i.WebsiteComponent.CreatedAt,
			&i.WebsiteComponent.UpdatedAt,
			&i.WebsiteComponent.Version,
			&i.WebsiteComponentDisplay.ID,
			&i.WebsiteComponentDisplay.WebsiteComponentID,
			&i.WebsiteComponentDisplay.Height,
			&i.WebsiteComponentDisplay.Width,
			&i.WebsiteComponentDisplay.XCoordinate,
			&i.WebsiteComponentDisplay.YCoordinate,
			&i.WebsiteComponentDisplay.MobileHeight,
			&i.WebsiteComponentDisplay.MobileWidth,
			&i.WebsiteComponentDisplay.MobileXCoordinate,
			&i.WebsiteComponentDisplay.MobileYCoordinate,
			&i.WebsiteComponentDisplay.CreatedAt,
			&i.WebsiteComponentDisplay.UpdatedAt,
			&i.WebsiteComponentDisplay.Version,
			&i.ImageComponent.ID,
			&i.ImageComponent.WebsiteComponentID,
			&i.ImageComponent.ImageID,
			&i.ImageComponent.CreatedAt,
			&i.ImageComponent.UpdatedAt,
			&i.ImageComponent.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTextComponentsByWebsiteID = `-- name: GetTextComponentsByWebsiteID :many
SELECT website_component.id, website_component.website_id, website_component.website_section_id, website_component.created_at, website_component.updated_at, website_component.version, website_component_display.id, website_component_display.website_component_id, website_component_display.height, website_component_display.width, website_component_display.x_coordinate, website_component_display.y_coordinate, website_component_display.mobile_height, website_component_display.mobile_width, website_component_display.mobile_x_coordinate, website_component_display.mobile_y_coordinate, website_component_display.created_at, website_component_display.updated_at, website_component_display.version, text_component.id, text_component.website_component_id, text_component.locale, text_component.content_json, text_component.content_html, text_component.created_at, text_component.updated_at, text_component.version FROM website_component
LEFT JOIN website_component_display ON website_component.id = website_component_display.website_component_id
JOIN text_component ON website_component.id = text_component.website_component_id
WHERE website_component.website_id = $1
AND text_component.locale = $2
`

type GetTextComponentsByWebsiteIDParams struct {
	WebsiteID uuid.UUID `json:"website_id"`
	Locale    string    `json:"locale"`
}

type GetTextComponentsByWebsiteIDRow struct {
	WebsiteComponent        WebsiteComponent        `json:"website_component"`
	WebsiteComponentDisplay WebsiteComponentDisplay `json:"website_component_display"`
	TextComponent           TextComponent           `json:"text_component"`
}

func (q *Queries) GetTextComponentsByWebsiteID(ctx context.Context, arg GetTextComponentsByWebsiteIDParams) ([]GetTextComponentsByWebsiteIDRow, error) {
	rows, err := q.db.Query(ctx, getTextComponentsByWebsiteID, arg.WebsiteID, arg.Locale)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTextComponentsByWebsiteIDRow{}
	for rows.Next() {
		var i GetTextComponentsByWebsiteIDRow
		if err := rows.Scan(
			&i.WebsiteComponent.ID,
			&i.WebsiteComponent.WebsiteID,
			&i.WebsiteComponent.WebsiteSectionID,
			&i.WebsiteComponent.CreatedAt,
			&i.WebsiteComponent.UpdatedAt,
			&i.WebsiteComponent.Version,
			&i.WebsiteComponentDisplay.ID,
			&i.WebsiteComponentDisplay.WebsiteComponentID,
			&i.WebsiteComponentDisplay.Height,
			&i.WebsiteComponentDisplay.Width,
			&i.WebsiteComponentDisplay.XCoordinate,
			&i.WebsiteComponentDisplay.YCoordinate,
			&i.WebsiteComponentDisplay.MobileHeight,
			&i.WebsiteComponentDisplay.MobileWidth,
			&i.WebsiteComponentDisplay.MobileXCoordinate,
			&i.WebsiteComponentDisplay.MobileYCoordinate,
			&i.WebsiteComponentDisplay.CreatedAt,
			&i.WebsiteComponentDisplay.UpdatedAt,
			&i.WebsiteComponentDisplay.Version,
			&i.TextComponent.ID,
			&i.TextComponent.WebsiteComponentID,
			&i.TextComponent.Locale,
			&i.TextComponent.ContentJson,
			&i.TextComponent.ContentHtml,
			&i.TextComponent.CreatedAt,
			&i.TextComponent.UpdatedAt,
			&i.TextComponent.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWebsiteComponentsByWebsiteSectionID = `-- name: GetWebsiteComponentsByWebsiteSectionID :many
SELECT website_component.id, website_component.website_id, website_component.website_section_id, website_component.created_at, website_component.updated_at, website_component.version, website_component_display.id, website_component_display.website_component_id, website_component_display.height, website_component_display.width, website_component_display.x_coordinate, website_component_display.y_coordinate, website_component_display.mobile_height, website_component_display.mobile_width, website_component_display.mobile_x_coordinate, website_component_display.mobile_y_coordinate, website_component_display.created_at, website_component_display.updated_at, website_component_display.version, website_page.id, website_page.website_id, website_page.url_slug, website_page.sort_key, website_page.created_at, website_page.updated_at, website_page.version FROM website_component
LEFT JOIN website_component_display ON website_component.id = website_component_display.website_component_id
LEFT JOIN website_page ON website_component.website_section_id = website_page.id
WHERE website_section_id = $1
`

type GetWebsiteComponentsByWebsiteSectionIDRow struct {
	WebsiteComponent        WebsiteComponent        `json:"website_component"`
	WebsiteComponentDisplay WebsiteComponentDisplay `json:"website_component_display"`
	WebsitePage             WebsitePage             `json:"website_page"`
}

func (q *Queries) GetWebsiteComponentsByWebsiteSectionID(ctx context.Context, websiteSectionID uuid.UUID) ([]GetWebsiteComponentsByWebsiteSectionIDRow, error) {
	rows, err := q.db.Query(ctx, getWebsiteComponentsByWebsiteSectionID, websiteSectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetWebsiteComponentsByWebsiteSectionIDRow{}
	for rows.Next() {
		var i GetWebsiteComponentsByWebsiteSectionIDRow
		if err := rows.Scan(
			&i.WebsiteComponent.ID,
			&i.WebsiteComponent.WebsiteID,
			&i.WebsiteComponent.WebsiteSectionID,
			&i.WebsiteComponent.CreatedAt,
			&i.WebsiteComponent.UpdatedAt,
			&i.WebsiteComponent.Version,
			&i.WebsiteComponentDisplay.ID,
			&i.WebsiteComponentDisplay.WebsiteComponentID,
			&i.WebsiteComponentDisplay.Height,
			&i.WebsiteComponentDisplay.Width,
			&i.WebsiteComponentDisplay.XCoordinate,
			&i.WebsiteComponentDisplay.YCoordinate,
			&i.WebsiteComponentDisplay.MobileHeight,
			&i.WebsiteComponentDisplay.MobileWidth,
			&i.WebsiteComponentDisplay.MobileXCoordinate,
			&i.WebsiteComponentDisplay.MobileYCoordinate,
			&i.WebsiteComponentDisplay.CreatedAt,
			&i.WebsiteComponentDisplay.UpdatedAt,
			&i.WebsiteComponentDisplay.Version,
			&i.WebsitePage.ID,
			&i.WebsitePage.WebsiteID,
			&i.WebsitePage.UrlSlug,
			&i.WebsitePage.SortKey,
			&i.WebsitePage.CreatedAt,
			&i.WebsitePage.UpdatedAt,
			&i.WebsitePage.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWebsiteImageComponent = `-- name: GetWebsiteImageComponent :one
SELECT website_component.id, website_component.website_id, website_component.website_section_id, website_component.created_at, website_component.updated_at, website_component.version, website_component_display.id, website_component_display.website_component_id, website_component_display.height, website_component_display.width, website_component_display.x_coordinate, website_component_display.y_coordinate, website_component_display.mobile_height, website_component_display.mobile_width, website_component_display.mobile_x_coordinate, website_component_display.mobile_y_coordinate, website_component_display.created_at, website_component_display.updated_at, website_component_display.version, image_component.id, image_component.website_component_id, image_component.image_id, image_component.created_at, image_component.updated_at, image_component.version FROM website_component 
LEFT JOIN website_component_display ON website_component.id = website_component_display.website_component_id
LEFT JOIN image_component ON website_component.id = image_component.website_component_id
WHERE website_component.id = $1
`

type GetWebsiteImageComponentRow struct {
	WebsiteComponent        WebsiteComponent        `json:"website_component"`
	WebsiteComponentDisplay WebsiteComponentDisplay `json:"website_component_display"`
	ImageComponent          ImageComponent          `json:"image_component"`
}

func (q *Queries) GetWebsiteImageComponent(ctx context.Context, id uuid.UUID) (GetWebsiteImageComponentRow, error) {
	row := q.db.QueryRow(ctx, getWebsiteImageComponent, id)
	var i GetWebsiteImageComponentRow
	err := row.Scan(
		&i.WebsiteComponent.ID,
		&i.WebsiteComponent.WebsiteID,
		&i.WebsiteComponent.WebsiteSectionID,
		&i.WebsiteComponent.CreatedAt,
		&i.WebsiteComponent.UpdatedAt,
		&i.WebsiteComponent.Version,
		&i.WebsiteComponentDisplay.ID,
		&i.WebsiteComponentDisplay.WebsiteComponentID,
		&i.WebsiteComponentDisplay.Height,
		&i.WebsiteComponentDisplay.Width,
		&i.WebsiteComponentDisplay.XCoordinate,
		&i.WebsiteComponentDisplay.YCoordinate,
		&i.WebsiteComponentDisplay.MobileHeight,
		&i.WebsiteComponentDisplay.MobileWidth,
		&i.WebsiteComponentDisplay.MobileXCoordinate,
		&i.WebsiteComponentDisplay.MobileYCoordinate,
		&i.WebsiteComponentDisplay.CreatedAt,
		&i.WebsiteComponentDisplay.UpdatedAt,
		&i.WebsiteComponentDisplay.Version,
		&i.ImageComponent.ID,
		&i.ImageComponent.WebsiteComponentID,
		&i.ImageComponent.ImageID,
		&i.ImageComponent.CreatedAt,
		&i.ImageComponent.UpdatedAt,
		&i.ImageComponent.Version,
	)
	return i, err
}

const getWebsiteTextComponent = `-- name: GetWebsiteTextComponent :one
SELECT website_component.id, website_component.website_id, website_component.website_section_id, website_component.created_at, website_component.updated_at, website_component.version, website_component_display.id, website_component_display.website_component_id, website_component_display.height, website_component_display.width, website_component_display.x_coordinate, website_component_display.y_coordinate, website_component_display.mobile_height, website_component_display.mobile_width, website_component_display.mobile_x_coordinate, website_component_display.mobile_y_coordinate, website_component_display.created_at, website_component_display.updated_at, website_component_display.version, text_component.id, text_component.website_component_id, text_component.locale, text_component.content_json, text_component.content_html, text_component.created_at, text_component.updated_at, text_component.version FROM website_component
LEFT JOIN website_component_display ON website_component.id = website_component_display.website_component_id
LEFT JOIN text_component ON website_component.id = text_component.website_component_id
WHERE website_component.id = $1
AND text_component.locale = $2
`

type GetWebsiteTextComponentParams struct {
	ID     uuid.UUID `json:"id"`
	Locale string    `json:"locale"`
}

type GetWebsiteTextComponentRow struct {
	WebsiteComponent        WebsiteComponent        `json:"website_component"`
	WebsiteComponentDisplay WebsiteComponentDisplay `json:"website_component_display"`
	TextComponent           TextComponent           `json:"text_component"`
}

func (q *Queries) GetWebsiteTextComponent(ctx context.Context, arg GetWebsiteTextComponentParams) (GetWebsiteTextComponentRow, error) {
	row := q.db.QueryRow(ctx, getWebsiteTextComponent, arg.ID, arg.Locale)
	var i GetWebsiteTextComponentRow
	err := row.Scan(
		&i.WebsiteComponent.ID,
		&i.WebsiteComponent.WebsiteID,
		&i.WebsiteComponent.WebsiteSectionID,
		&i.WebsiteComponent.CreatedAt,
		&i.WebsiteComponent.UpdatedAt,
		&i.WebsiteComponent.Version,
		&i.WebsiteComponentDisplay.ID,
		&i.WebsiteComponentDisplay.WebsiteComponentID,
		&i.WebsiteComponentDisplay.Height,
		&i.WebsiteComponentDisplay.Width,
		&i.WebsiteComponentDisplay.XCoordinate,
		&i.WebsiteComponentDisplay.YCoordinate,
		&i.WebsiteComponentDisplay.MobileHeight,
		&i.WebsiteComponentDisplay.MobileWidth,
		&i.WebsiteComponentDisplay.MobileXCoordinate,
		&i.WebsiteComponentDisplay.MobileYCoordinate,
		&i.WebsiteComponentDisplay.CreatedAt,
		&i.WebsiteComponentDisplay.UpdatedAt,
		&i.WebsiteComponentDisplay.Version,
		&i.TextComponent.ID,
		&i.TextComponent.WebsiteComponentID,
		&i.TextComponent.Locale,
		&i.TextComponent.ContentJson,
		&i.TextComponent.ContentHtml,
		&i.TextComponent.CreatedAt,
		&i.TextComponent.UpdatedAt,
		&i.TextComponent.Version,
	)
	return i, err
}

const updateWebsiteComponent = `-- name: UpdateWebsiteComponent :one
UPDATE website_component SET
    website_id = coalesce($1, website_component.website_id),
    website_section_id = coalesce($2, website_component.website_section_id),
    updated_at = now(), 
    version = website_component.version + 1
WHERE id = $3 RETURNING id, website_id, website_section_id, created_at, updated_at, version
`

type UpdateWebsiteComponentParams struct {
	WebsiteID        uuid.UUID `json:"website_id"`
	WebsiteSectionID uuid.UUID `json:"website_section_id"`
	ID               uuid.UUID `json:"id"`
}

func (q *Queries) UpdateWebsiteComponent(ctx context.Context, arg UpdateWebsiteComponentParams) (WebsiteComponent, error) {
	row := q.db.QueryRow(ctx, updateWebsiteComponent, arg.WebsiteID, arg.WebsiteSectionID, arg.ID)
	var i WebsiteComponent
	err := row.Scan(
		&i.ID,
		&i.WebsiteID,
		&i.WebsiteSectionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const updateWebsiteTextComponent = `-- name: UpdateWebsiteTextComponent :one
UPDATE text_component SET
    content_json = coalesce($1, text_component.content_json),
    content_html = coalesce($2, text_component.content_html),
    updated_at = now(), 
    version = text_component.version + 1
WHERE website_component_id = $3
AND locale = $4 RETURNING id, website_component_id, locale, content_json, content_html, created_at, updated_at, version
`

type UpdateWebsiteTextComponentParams struct {
	ContentJson        []byte    `json:"content_json"`
	ContentHtml        *string   `json:"content_html"`
	WebsiteComponentID uuid.UUID `json:"website_component_id"`
	Locale             string    `json:"locale"`
}

func (q *Queries) UpdateWebsiteTextComponent(ctx context.Context, arg UpdateWebsiteTextComponentParams) (TextComponent, error) {
	row := q.db.QueryRow(ctx, updateWebsiteTextComponent,
		arg.ContentJson,
		arg.ContentHtml,
		arg.WebsiteComponentID,
		arg.Locale,
	)
	var i TextComponent
	err := row.Scan(
		&i.ID,
		&i.WebsiteComponentID,
		&i.Locale,
		&i.ContentJson,
		&i.ContentHtml,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const upsertWebsiteQandAComponent = `-- name: UpsertWebsiteQandAComponent :one
INSERT INTO image_component (website_component_id, image_id) VALUES ($1, $2) 
ON CONFLICT (website_component_id) DO UPDATE SET 
    image_id = coalesce($2, image_component.image_id),
    updated_at = now(), 
    version = image_component.version + 1 RETURNING id, website_component_id, image_id, created_at, updated_at, version
`

type UpsertWebsiteQandAComponentParams struct {
	WebsiteComponentID uuid.UUID  `json:"website_component_id"`
	ImageID            *uuid.UUID `json:"image_id"`
}

func (q *Queries) UpsertWebsiteQandAComponent(ctx context.Context, arg UpsertWebsiteQandAComponentParams) (ImageComponent, error) {
	row := q.db.QueryRow(ctx, upsertWebsiteQandAComponent, arg.WebsiteComponentID, arg.ImageID)
	var i ImageComponent
	err := row.Scan(
		&i.ID,
		&i.WebsiteComponentID,
		&i.ImageID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const upsertWebsiteSimpleTextComponent = `-- name: UpsertWebsiteSimpleTextComponent :one
INSERT INTO text_component (website_component_id, locale, content_json, content_html) VALUES ($1, $2, $3, $4) 
ON CONFLICT (website_component_id, locale) DO UPDATE SET 
    content_json = coalesce($3, text_component.content_json),
    content_html = coalesce($4, text_component.content_html),
    updated_at = now(), 
    version = text_component.version + 1 RETURNING id, website_component_id, locale, content_json, content_html, created_at, updated_at, version
`

type UpsertWebsiteSimpleTextComponentParams struct {
	WebsiteComponentID uuid.UUID `json:"website_component_id"`
	Locale             string    `json:"locale"`
	ContentJson        []byte    `json:"content_json"`
	ContentHtml        *string   `json:"content_html"`
}

func (q *Queries) UpsertWebsiteSimpleTextComponent(ctx context.Context, arg UpsertWebsiteSimpleTextComponentParams) (TextComponent, error) {
	row := q.db.QueryRow(ctx, upsertWebsiteSimpleTextComponent,
		arg.WebsiteComponentID,
		arg.Locale,
		arg.ContentJson,
		arg.ContentHtml,
	)
	var i TextComponent
	err := row.Scan(
		&i.ID,
		&i.WebsiteComponentID,
		&i.Locale,
		&i.ContentJson,
		&i.ContentHtml,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}
