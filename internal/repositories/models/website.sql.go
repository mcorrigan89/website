// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: website.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const getWebsiteByComponentID = `-- name: GetWebsiteByComponentID :one
SELECT website.id, website.handle, website.default_locale, website.created_at, website.updated_at, website.version FROM website 
LEFT JOIN website_component ON website.id = website_component.website_id
WHERE website_component.id = $1
`

type GetWebsiteByComponentIDRow struct {
	Website Website `json:"website"`
}

func (q *Queries) GetWebsiteByComponentID(ctx context.Context, id uuid.UUID) (GetWebsiteByComponentIDRow, error) {
	row := q.db.QueryRow(ctx, getWebsiteByComponentID, id)
	var i GetWebsiteByComponentIDRow
	err := row.Scan(
		&i.Website.ID,
		&i.Website.Handle,
		&i.Website.DefaultLocale,
		&i.Website.CreatedAt,
		&i.Website.UpdatedAt,
		&i.Website.Version,
	)
	return i, err
}

const getWebsiteByHandle = `-- name: GetWebsiteByHandle :one
SELECT website.id, website.handle, website.default_locale, website.created_at, website.updated_at, website.version FROM website WHERE handle = $1
`

type GetWebsiteByHandleRow struct {
	Website Website `json:"website"`
}

func (q *Queries) GetWebsiteByHandle(ctx context.Context, handle string) (GetWebsiteByHandleRow, error) {
	row := q.db.QueryRow(ctx, getWebsiteByHandle, handle)
	var i GetWebsiteByHandleRow
	err := row.Scan(
		&i.Website.ID,
		&i.Website.Handle,
		&i.Website.DefaultLocale,
		&i.Website.CreatedAt,
		&i.Website.UpdatedAt,
		&i.Website.Version,
	)
	return i, err
}

const getWebsiteByID = `-- name: GetWebsiteByID :one
SELECT website.id, website.handle, website.default_locale, website.created_at, website.updated_at, website.version FROM website WHERE id = $1
`

type GetWebsiteByIDRow struct {
	Website Website `json:"website"`
}

func (q *Queries) GetWebsiteByID(ctx context.Context, id uuid.UUID) (GetWebsiteByIDRow, error) {
	row := q.db.QueryRow(ctx, getWebsiteByID, id)
	var i GetWebsiteByIDRow
	err := row.Scan(
		&i.Website.ID,
		&i.Website.Handle,
		&i.Website.DefaultLocale,
		&i.Website.CreatedAt,
		&i.Website.UpdatedAt,
		&i.Website.Version,
	)
	return i, err
}

const getWebsiteByPageID = `-- name: GetWebsiteByPageID :one
SELECT website.id, website.handle, website.default_locale, website.created_at, website.updated_at, website.version FROM website 
LEFT JOIN website_page ON website.id = website_page.website_id
WHERE website_page.id = $1
`

type GetWebsiteByPageIDRow struct {
	Website Website `json:"website"`
}

func (q *Queries) GetWebsiteByPageID(ctx context.Context, id uuid.UUID) (GetWebsiteByPageIDRow, error) {
	row := q.db.QueryRow(ctx, getWebsiteByPageID, id)
	var i GetWebsiteByPageIDRow
	err := row.Scan(
		&i.Website.ID,
		&i.Website.Handle,
		&i.Website.DefaultLocale,
		&i.Website.CreatedAt,
		&i.Website.UpdatedAt,
		&i.Website.Version,
	)
	return i, err
}

const getWebsiteContentByWebsiteID = `-- name: GetWebsiteContentByWebsiteID :one
SELECT website_content.id, website_content.website_id, website_content.locale, website_content.website_display_name, website_content.website_display_description, website_content.created_at, website_content.updated_at, website_content.version FROM website_content WHERE website_id = $1 AND locale = $2
`

type GetWebsiteContentByWebsiteIDParams struct {
	WebsiteID uuid.UUID `json:"website_id"`
	Locale    string    `json:"locale"`
}

type GetWebsiteContentByWebsiteIDRow struct {
	WebsiteContent WebsiteContent `json:"website_content"`
}

func (q *Queries) GetWebsiteContentByWebsiteID(ctx context.Context, arg GetWebsiteContentByWebsiteIDParams) (GetWebsiteContentByWebsiteIDRow, error) {
	row := q.db.QueryRow(ctx, getWebsiteContentByWebsiteID, arg.WebsiteID, arg.Locale)
	var i GetWebsiteContentByWebsiteIDRow
	err := row.Scan(
		&i.WebsiteContent.ID,
		&i.WebsiteContent.WebsiteID,
		&i.WebsiteContent.Locale,
		&i.WebsiteContent.WebsiteDisplayName,
		&i.WebsiteContent.WebsiteDisplayDescription,
		&i.WebsiteContent.CreatedAt,
		&i.WebsiteContent.UpdatedAt,
		&i.WebsiteContent.Version,
	)
	return i, err
}

const getWebsitePagesByWebsiteID = `-- name: GetWebsitePagesByWebsiteID :many
SELECT website_page.id, website_page.website_id, website_page.url_slug, website_page.sort_key, website_page.created_at, website_page.updated_at, website_page.version, website_page_content.id, website_page_content.website_page_id, website_page_content.locale, website_page_content.title, website_page_content.subtitle, website_page_content.created_at, website_page_content.updated_at, website_page_content.version FROM website_page 
LEFT JOIN website_page_content ON website_page.id = website_page_content.website_page_id
WHERE website_page.website_id = $1 AND website_page_content.locale = $2
ORDER BY website_page.sort_key
`

type GetWebsitePagesByWebsiteIDParams struct {
	WebsiteID uuid.UUID `json:"website_id"`
	Locale    string    `json:"locale"`
}

type GetWebsitePagesByWebsiteIDRow struct {
	WebsitePage        WebsitePage        `json:"website_page"`
	WebsitePageContent WebsitePageContent `json:"website_page_content"`
}

func (q *Queries) GetWebsitePagesByWebsiteID(ctx context.Context, arg GetWebsitePagesByWebsiteIDParams) ([]GetWebsitePagesByWebsiteIDRow, error) {
	rows, err := q.db.Query(ctx, getWebsitePagesByWebsiteID, arg.WebsiteID, arg.Locale)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetWebsitePagesByWebsiteIDRow{}
	for rows.Next() {
		var i GetWebsitePagesByWebsiteIDRow
		if err := rows.Scan(
			&i.WebsitePage.ID,
			&i.WebsitePage.WebsiteID,
			&i.WebsitePage.UrlSlug,
			&i.WebsitePage.SortKey,
			&i.WebsitePage.CreatedAt,
			&i.WebsitePage.UpdatedAt,
			&i.WebsitePage.Version,
			&i.WebsitePageContent.ID,
			&i.WebsitePageContent.WebsitePageID,
			&i.WebsitePageContent.Locale,
			&i.WebsitePageContent.Title,
			&i.WebsitePageContent.Subtitle,
			&i.WebsitePageContent.CreatedAt,
			&i.WebsitePageContent.UpdatedAt,
			&i.WebsitePageContent.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
