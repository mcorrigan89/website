// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: serviceapis/messaging/v1/identity.proto

package messagingv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mcorrigan89/website/gen/serviceapis/messaging/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IdentityMessagingServiceName is the fully-qualified name of the IdentityMessagingService service.
	IdentityMessagingServiceName = "serviceapis.messaging.v1.IdentityMessagingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IdentityMessagingServiceSendVerificationEmailProcedure is the fully-qualified name of the
	// IdentityMessagingService's SendVerificationEmail RPC.
	IdentityMessagingServiceSendVerificationEmailProcedure = "/serviceapis.messaging.v1.IdentityMessagingService/SendVerificationEmail"
	// IdentityMessagingServiceSendPasswordResetEmailProcedure is the fully-qualified name of the
	// IdentityMessagingService's SendPasswordResetEmail RPC.
	IdentityMessagingServiceSendPasswordResetEmailProcedure = "/serviceapis.messaging.v1.IdentityMessagingService/SendPasswordResetEmail"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	identityMessagingServiceServiceDescriptor                      = v1.File_serviceapis_messaging_v1_identity_proto.Services().ByName("IdentityMessagingService")
	identityMessagingServiceSendVerificationEmailMethodDescriptor  = identityMessagingServiceServiceDescriptor.Methods().ByName("SendVerificationEmail")
	identityMessagingServiceSendPasswordResetEmailMethodDescriptor = identityMessagingServiceServiceDescriptor.Methods().ByName("SendPasswordResetEmail")
)

// IdentityMessagingServiceClient is a client for the
// serviceapis.messaging.v1.IdentityMessagingService service.
type IdentityMessagingServiceClient interface {
	SendVerificationEmail(context.Context, *connect.Request[v1.SendVerificationEmailRequest]) (*connect.Response[v1.SendVerificationEmailResponse], error)
	SendPasswordResetEmail(context.Context, *connect.Request[v1.SendPasswordResetEmailRequest]) (*connect.Response[v1.SendPasswordResetEmailResponse], error)
}

// NewIdentityMessagingServiceClient constructs a client for the
// serviceapis.messaging.v1.IdentityMessagingService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIdentityMessagingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IdentityMessagingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &identityMessagingServiceClient{
		sendVerificationEmail: connect.NewClient[v1.SendVerificationEmailRequest, v1.SendVerificationEmailResponse](
			httpClient,
			baseURL+IdentityMessagingServiceSendVerificationEmailProcedure,
			connect.WithSchema(identityMessagingServiceSendVerificationEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		sendPasswordResetEmail: connect.NewClient[v1.SendPasswordResetEmailRequest, v1.SendPasswordResetEmailResponse](
			httpClient,
			baseURL+IdentityMessagingServiceSendPasswordResetEmailProcedure,
			connect.WithSchema(identityMessagingServiceSendPasswordResetEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// identityMessagingServiceClient implements IdentityMessagingServiceClient.
type identityMessagingServiceClient struct {
	sendVerificationEmail  *connect.Client[v1.SendVerificationEmailRequest, v1.SendVerificationEmailResponse]
	sendPasswordResetEmail *connect.Client[v1.SendPasswordResetEmailRequest, v1.SendPasswordResetEmailResponse]
}

// SendVerificationEmail calls
// serviceapis.messaging.v1.IdentityMessagingService.SendVerificationEmail.
func (c *identityMessagingServiceClient) SendVerificationEmail(ctx context.Context, req *connect.Request[v1.SendVerificationEmailRequest]) (*connect.Response[v1.SendVerificationEmailResponse], error) {
	return c.sendVerificationEmail.CallUnary(ctx, req)
}

// SendPasswordResetEmail calls
// serviceapis.messaging.v1.IdentityMessagingService.SendPasswordResetEmail.
func (c *identityMessagingServiceClient) SendPasswordResetEmail(ctx context.Context, req *connect.Request[v1.SendPasswordResetEmailRequest]) (*connect.Response[v1.SendPasswordResetEmailResponse], error) {
	return c.sendPasswordResetEmail.CallUnary(ctx, req)
}

// IdentityMessagingServiceHandler is an implementation of the
// serviceapis.messaging.v1.IdentityMessagingService service.
type IdentityMessagingServiceHandler interface {
	SendVerificationEmail(context.Context, *connect.Request[v1.SendVerificationEmailRequest]) (*connect.Response[v1.SendVerificationEmailResponse], error)
	SendPasswordResetEmail(context.Context, *connect.Request[v1.SendPasswordResetEmailRequest]) (*connect.Response[v1.SendPasswordResetEmailResponse], error)
}

// NewIdentityMessagingServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIdentityMessagingServiceHandler(svc IdentityMessagingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	identityMessagingServiceSendVerificationEmailHandler := connect.NewUnaryHandler(
		IdentityMessagingServiceSendVerificationEmailProcedure,
		svc.SendVerificationEmail,
		connect.WithSchema(identityMessagingServiceSendVerificationEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	identityMessagingServiceSendPasswordResetEmailHandler := connect.NewUnaryHandler(
		IdentityMessagingServiceSendPasswordResetEmailProcedure,
		svc.SendPasswordResetEmail,
		connect.WithSchema(identityMessagingServiceSendPasswordResetEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/serviceapis.messaging.v1.IdentityMessagingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IdentityMessagingServiceSendVerificationEmailProcedure:
			identityMessagingServiceSendVerificationEmailHandler.ServeHTTP(w, r)
		case IdentityMessagingServiceSendPasswordResetEmailProcedure:
			identityMessagingServiceSendPasswordResetEmailHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIdentityMessagingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIdentityMessagingServiceHandler struct{}

func (UnimplementedIdentityMessagingServiceHandler) SendVerificationEmail(context.Context, *connect.Request[v1.SendVerificationEmailRequest]) (*connect.Response[v1.SendVerificationEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("serviceapis.messaging.v1.IdentityMessagingService.SendVerificationEmail is not implemented"))
}

func (UnimplementedIdentityMessagingServiceHandler) SendPasswordResetEmail(context.Context, *connect.Request[v1.SendPasswordResetEmailRequest]) (*connect.Response[v1.SendPasswordResetEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("serviceapis.messaging.v1.IdentityMessagingService.SendPasswordResetEmail is not implemented"))
}
