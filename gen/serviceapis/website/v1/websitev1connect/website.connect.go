// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: serviceapis/website/v1/website.proto

package websitev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/mcorrigan89/website/gen/serviceapis/website/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WebsiteServiceName is the fully-qualified name of the WebsiteService service.
	WebsiteServiceName = "serviceapis.website.v1.WebsiteService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WebsiteServiceWebsiteByHandleProcedure is the fully-qualified name of the WebsiteService's
	// WebsiteByHandle RPC.
	WebsiteServiceWebsiteByHandleProcedure = "/serviceapis.website.v1.WebsiteService/WebsiteByHandle"
	// WebsiteServiceCreateWebsiteProcedure is the fully-qualified name of the WebsiteService's
	// CreateWebsite RPC.
	WebsiteServiceCreateWebsiteProcedure = "/serviceapis.website.v1.WebsiteService/CreateWebsite"
	// WebsiteServiceCreateWebsitePageProcedure is the fully-qualified name of the WebsiteService's
	// CreateWebsitePage RPC.
	WebsiteServiceCreateWebsitePageProcedure = "/serviceapis.website.v1.WebsiteService/CreateWebsitePage"
	// WebsiteServiceUpdateWebsitePageProcedure is the fully-qualified name of the WebsiteService's
	// UpdateWebsitePage RPC.
	WebsiteServiceUpdateWebsitePageProcedure = "/serviceapis.website.v1.WebsiteService/UpdateWebsitePage"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	websiteServiceServiceDescriptor                 = v1.File_serviceapis_website_v1_website_proto.Services().ByName("WebsiteService")
	websiteServiceWebsiteByHandleMethodDescriptor   = websiteServiceServiceDescriptor.Methods().ByName("WebsiteByHandle")
	websiteServiceCreateWebsiteMethodDescriptor     = websiteServiceServiceDescriptor.Methods().ByName("CreateWebsite")
	websiteServiceCreateWebsitePageMethodDescriptor = websiteServiceServiceDescriptor.Methods().ByName("CreateWebsitePage")
	websiteServiceUpdateWebsitePageMethodDescriptor = websiteServiceServiceDescriptor.Methods().ByName("UpdateWebsitePage")
)

// WebsiteServiceClient is a client for the serviceapis.website.v1.WebsiteService service.
type WebsiteServiceClient interface {
	WebsiteByHandle(context.Context, *connect.Request[v1.WebsiteByHandleRequest]) (*connect.Response[v1.WebsiteByHandleResponse], error)
	CreateWebsite(context.Context, *connect.Request[v1.CreateWebsiteRequest]) (*connect.Response[v1.CreateWebsiteResponse], error)
	CreateWebsitePage(context.Context, *connect.Request[v1.CreateWebsitePageRequest]) (*connect.Response[v1.CreateWebsitePageResponse], error)
	UpdateWebsitePage(context.Context, *connect.Request[v1.UpdateWebsitePageRequest]) (*connect.Response[v1.UpdateWebsitePageResponse], error)
}

// NewWebsiteServiceClient constructs a client for the serviceapis.website.v1.WebsiteService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWebsiteServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WebsiteServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &websiteServiceClient{
		websiteByHandle: connect.NewClient[v1.WebsiteByHandleRequest, v1.WebsiteByHandleResponse](
			httpClient,
			baseURL+WebsiteServiceWebsiteByHandleProcedure,
			connect.WithSchema(websiteServiceWebsiteByHandleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createWebsite: connect.NewClient[v1.CreateWebsiteRequest, v1.CreateWebsiteResponse](
			httpClient,
			baseURL+WebsiteServiceCreateWebsiteProcedure,
			connect.WithSchema(websiteServiceCreateWebsiteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createWebsitePage: connect.NewClient[v1.CreateWebsitePageRequest, v1.CreateWebsitePageResponse](
			httpClient,
			baseURL+WebsiteServiceCreateWebsitePageProcedure,
			connect.WithSchema(websiteServiceCreateWebsitePageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateWebsitePage: connect.NewClient[v1.UpdateWebsitePageRequest, v1.UpdateWebsitePageResponse](
			httpClient,
			baseURL+WebsiteServiceUpdateWebsitePageProcedure,
			connect.WithSchema(websiteServiceUpdateWebsitePageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// websiteServiceClient implements WebsiteServiceClient.
type websiteServiceClient struct {
	websiteByHandle   *connect.Client[v1.WebsiteByHandleRequest, v1.WebsiteByHandleResponse]
	createWebsite     *connect.Client[v1.CreateWebsiteRequest, v1.CreateWebsiteResponse]
	createWebsitePage *connect.Client[v1.CreateWebsitePageRequest, v1.CreateWebsitePageResponse]
	updateWebsitePage *connect.Client[v1.UpdateWebsitePageRequest, v1.UpdateWebsitePageResponse]
}

// WebsiteByHandle calls serviceapis.website.v1.WebsiteService.WebsiteByHandle.
func (c *websiteServiceClient) WebsiteByHandle(ctx context.Context, req *connect.Request[v1.WebsiteByHandleRequest]) (*connect.Response[v1.WebsiteByHandleResponse], error) {
	return c.websiteByHandle.CallUnary(ctx, req)
}

// CreateWebsite calls serviceapis.website.v1.WebsiteService.CreateWebsite.
func (c *websiteServiceClient) CreateWebsite(ctx context.Context, req *connect.Request[v1.CreateWebsiteRequest]) (*connect.Response[v1.CreateWebsiteResponse], error) {
	return c.createWebsite.CallUnary(ctx, req)
}

// CreateWebsitePage calls serviceapis.website.v1.WebsiteService.CreateWebsitePage.
func (c *websiteServiceClient) CreateWebsitePage(ctx context.Context, req *connect.Request[v1.CreateWebsitePageRequest]) (*connect.Response[v1.CreateWebsitePageResponse], error) {
	return c.createWebsitePage.CallUnary(ctx, req)
}

// UpdateWebsitePage calls serviceapis.website.v1.WebsiteService.UpdateWebsitePage.
func (c *websiteServiceClient) UpdateWebsitePage(ctx context.Context, req *connect.Request[v1.UpdateWebsitePageRequest]) (*connect.Response[v1.UpdateWebsitePageResponse], error) {
	return c.updateWebsitePage.CallUnary(ctx, req)
}

// WebsiteServiceHandler is an implementation of the serviceapis.website.v1.WebsiteService service.
type WebsiteServiceHandler interface {
	WebsiteByHandle(context.Context, *connect.Request[v1.WebsiteByHandleRequest]) (*connect.Response[v1.WebsiteByHandleResponse], error)
	CreateWebsite(context.Context, *connect.Request[v1.CreateWebsiteRequest]) (*connect.Response[v1.CreateWebsiteResponse], error)
	CreateWebsitePage(context.Context, *connect.Request[v1.CreateWebsitePageRequest]) (*connect.Response[v1.CreateWebsitePageResponse], error)
	UpdateWebsitePage(context.Context, *connect.Request[v1.UpdateWebsitePageRequest]) (*connect.Response[v1.UpdateWebsitePageResponse], error)
}

// NewWebsiteServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWebsiteServiceHandler(svc WebsiteServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	websiteServiceWebsiteByHandleHandler := connect.NewUnaryHandler(
		WebsiteServiceWebsiteByHandleProcedure,
		svc.WebsiteByHandle,
		connect.WithSchema(websiteServiceWebsiteByHandleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	websiteServiceCreateWebsiteHandler := connect.NewUnaryHandler(
		WebsiteServiceCreateWebsiteProcedure,
		svc.CreateWebsite,
		connect.WithSchema(websiteServiceCreateWebsiteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	websiteServiceCreateWebsitePageHandler := connect.NewUnaryHandler(
		WebsiteServiceCreateWebsitePageProcedure,
		svc.CreateWebsitePage,
		connect.WithSchema(websiteServiceCreateWebsitePageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	websiteServiceUpdateWebsitePageHandler := connect.NewUnaryHandler(
		WebsiteServiceUpdateWebsitePageProcedure,
		svc.UpdateWebsitePage,
		connect.WithSchema(websiteServiceUpdateWebsitePageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/serviceapis.website.v1.WebsiteService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WebsiteServiceWebsiteByHandleProcedure:
			websiteServiceWebsiteByHandleHandler.ServeHTTP(w, r)
		case WebsiteServiceCreateWebsiteProcedure:
			websiteServiceCreateWebsiteHandler.ServeHTTP(w, r)
		case WebsiteServiceCreateWebsitePageProcedure:
			websiteServiceCreateWebsitePageHandler.ServeHTTP(w, r)
		case WebsiteServiceUpdateWebsitePageProcedure:
			websiteServiceUpdateWebsitePageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWebsiteServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWebsiteServiceHandler struct{}

func (UnimplementedWebsiteServiceHandler) WebsiteByHandle(context.Context, *connect.Request[v1.WebsiteByHandleRequest]) (*connect.Response[v1.WebsiteByHandleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("serviceapis.website.v1.WebsiteService.WebsiteByHandle is not implemented"))
}

func (UnimplementedWebsiteServiceHandler) CreateWebsite(context.Context, *connect.Request[v1.CreateWebsiteRequest]) (*connect.Response[v1.CreateWebsiteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("serviceapis.website.v1.WebsiteService.CreateWebsite is not implemented"))
}

func (UnimplementedWebsiteServiceHandler) CreateWebsitePage(context.Context, *connect.Request[v1.CreateWebsitePageRequest]) (*connect.Response[v1.CreateWebsitePageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("serviceapis.website.v1.WebsiteService.CreateWebsitePage is not implemented"))
}

func (UnimplementedWebsiteServiceHandler) UpdateWebsitePage(context.Context, *connect.Request[v1.UpdateWebsitePageRequest]) (*connect.Response[v1.UpdateWebsitePageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("serviceapis.website.v1.WebsiteService.UpdateWebsitePage is not implemented"))
}
